buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'
    id "org.flywaydb.flyway" version "6.2.4"
    id 'jacoco'
}

group = 'com.platform'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = '0.8.8'
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //SECURITY
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // OAUTH2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JWT
    implementation 'com.auth0:java-jwt:3.18.1'

    // OAUTH
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // VALIDATION
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QUERYDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // MYSQL
    implementation 'mysql:mysql-connector-java:8.0.28'

    // REDIS
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.17.4'

    // LOMBOK
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ANNOTATION PROCESSOR
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    // APACHE
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //TEST
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'

    // MYSQL TEST CONTAINER
    testImplementation "org.testcontainers:mysql:1.17.5"
    testImplementation "org.testcontainers:junit-jupiter:1.17.5"
    testImplementation "com.redis.testcontainers:testcontainers-redis-junit:1.6.2"

    // SWAGGER
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    implementation 'org.springdoc:springdoc-openapi-security:1.6.9'

    // LOCALSTACK
    testImplementation "org.testcontainers:localstack:1.16.3"

    // JASYPT
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'

    // Flyway
    implementation "org.flywaydb:flyway-mysql"
    implementation 'org.flywaydb:flyway-core:7.15.0'
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:7.0.0'

    // Prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // ShedLock
    implementation 'net.javacrumbs.shedlock:shedlock-spring:5.2.0'
    implementation 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:5.2.0'

    // FAKER
    implementation 'net.datafaker:datafaker:1.9.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
}

flyway {
    configFiles = ['flyway.conf']
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}

// 여기부터는 Gradle 5.0 이후로 추가 작성
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

// jacoco
test {
    finalizedBy(jacocoTestReport)
}

jacocoTestReport {
    executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*config*",
                            "**/*dto*",
                            "**/*application*",
                            "**/*request*",
                            "**/*response*",
                            "**/*exception*",
                            "**/*security*",
                            "**/*Mapper*",
                            "**/*validation*",
                            "**/*superentity*",
                            "**/*utils*",
                            "**/*aop*",
                            "**/*scheduler*"
                    ] + Qdomains)
                })
        )
    }
    finalizedBy(jacocoTestCoverageVerification)
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
            }

            excludes = [
                    "**.*config*",
                    "**.*dto*",
                    "**.*request*",
                    "**.*response*",
                    "**.*exception*",
                    "**.*security*",
                    "**.*property*"
            ] + Qdomains
        }
    }
}
