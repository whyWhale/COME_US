version: '3.8'

networks:
  default:
    name: come-us

volumes:
  data:
    driver: local
  config:
    driver: local

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/notssl-local-nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/auth/minica.pem:/user/apps/nginx/minica.pem
      - ./nginx/auth/minica-key.pem:/user/apps/nginx/minica-key.pem
    ports:
      - 80:80
      - 443:443

  mysql-master:
    image: mysql:8.0
    container_name: mysql-master
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: come-us
      TZ: Asia/Seoul
    volumes:
      - ./mysql-replication/master/my.cnf:/etc/mysql/my.cnf
      - ./mysql-replication/master/data:/var/lib/mysql
      - ./mysql-replication/master/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"

  mysql-slave-1:
    image: mysql:8.0
    container_name: mysql-slave-1
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: come-us
      TZ: Asia/Seoul
    volumes:
      - ./mysql-replication/slave/my.cnf:/etc/mysql/my.cnf
      - ./mysql-replication/slave/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3307:3306"
    depends_on:
      - mysql-master

  mysql-phpmyadmin:
    depends_on:
      - mysql-master
    image: phpmyadmin/phpmyadmin
    container_name: mysql-phpmyadmin
    ports:
      - "8082:80"
    environment:
      PMA_HOST: mysql-master
      MYSQL_ROOT_PASSWORD: password
    restart: always

  redis-node1:
    platform: linux/x86_64 # m1 MacOS의 경우
    image: redis:6.2
    container_name: redis-node1
    volumes: # 작성한 설정 파일을 볼륨을 통해 컨테이너에 공유
      - ./redis-cluster/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6380:6380"
      - "6381:6381"
      - "6379:6379"
      - "6382:6382"
      - "6383:6383"
      - "6384:6384"

  redis-node2:
    network_mode: "service:redis-node1"
    platform: linux/x86_64
    image: redis:6.2
    container_name: redis-node2
    volumes:
      - ./redis-cluster/redis1.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-node3:
    network_mode: "service:redis-node1"
    platform: linux/x86_64
    image: redis:6.2
    container_name: redis-node3
    volumes:
      - ./redis-cluster/redis2.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-slave1:
    network_mode: "service:redis-node1"
    platform: linux/x86_64
    image: redis:6.2
    container_name: redis-slave1
    volumes:
      - ./redis-cluster/redis-slave1.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-slave2:
    network_mode: "service:redis-node1"
    platform: linux/x86_64
    image: redis:6.2
    container_name: redis-slave2
    volumes:
      - ./redis-cluster/redis-slave2.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-slave3:
    network_mode: "service:redis-node1"
    platform: linux/x86_64
    image: redis:6.2
    container_name: redis-slave3
    volumes:
      - ./redis-cluster/redis-slave3.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  redis-cluster-entry:
    network_mode: "service:redis-node1"
    platform: linux/x86_64
    image: redis:6.2
    container_name: redis-cluster-entry
    command: redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 
      127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 --cluster-yes --cluster-replicas 1
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
    restart: on-failure

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis-node1:6379
    ports:
      - "8087:8081"
    platform: linux/x86_64
    restart: always

  localstack:
    image: localstack/localstack
    container_name: localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=S3
      - DEFAULT_REGION=ap-northeast-2
      - DATA_DIR=/tmp/localstack/data
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DEBUG=1

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/volume:/var/lib/grafana
    restart: always